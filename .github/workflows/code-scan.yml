name: 'Entur/Security/Code Scan'

on:
    workflow_call:  
      secrets: 
        external_repository_token:
          description: 'Token to access the external repository mentioned in the code_scan_config.yml file. Must have read access to the repository.'
          required: false

jobs:
#  get-repository-languages:
#      runs-on: ubuntu-latest
#      outputs: 
#          repository_languages: ${{ env.GHA_SECURITY_CODE_SCAN_REPOSITORY_LANGUAGES }} 
#      steps:
#          - name: "Get repository languages"
#            id: get-repository-languages
#            run: |
#                languages="$(gh api /repos/${{ github.repository }}/languages | \
#                  jq 'keys 
#                      | .[] as $langs
#                      | {
#                          "C":"c",
#                          "C++":"cpp",
#                          "C#":"csharp",
#                          "Go":"go",
#                          "Java":"java",
#                          "JavaScript":"javascript-typescript",
#                          "TypeScript":"javascript-typescript",
#                          "Kotlin":"kotlin",
#                          "Python":"python",
#                          "Ruby":"ruby",
#                          "Swift":"swift"
#                        } as $supported 
#                      | $langs         # operate on all the languages
#                      | $supported[.]  # and lookup their values, null if not found
#                      | select(.)      # select removes null values
#                  ' | \
#                  jq --slurp --compact-output 'unique')" # make a oneliner, and remove duplicates
#          
#                echo 'GHA_SECURITY_CODE_SCAN_REPOSITORY_LANGUAGES='$languages >> $GITHUB_ENV
#            env:
#              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  codeql-analysis:
#      runs-on: ubuntu-latest
#      needs: get-repository-languages
#      permissions:
#          # CodeQL - required for all workflows
#          security-events: write
#
#          # CodeQL - only required for workflows in private repositories
#          actions: read
#          contents: read
#      strategy:
#          fail-fast: false
#          matrix:
#              language: ${{fromJson(needs.get-repository-languages.outputs.repository_languages)}}
#      steps:
#          - name: "Checkout repository"
#            uses: actions/checkout@v4
#          - name: "Initialize CodeQL for Java"
#            if: matrix.language == 'java'
#            uses: github/codeql-action/init@v3
#            with:
#              languages: ${{ matrix.language }}
#              build-mode: none
#          - name: "Initialize CodeQL"
#            if: matrix.language != 'java'
#            uses: github/codeql-action/init@v3
#            with:
#              languages: ${{ matrix.language }}
#          - name: "Perform CodeQL Analysis"
#            id: codeql-analysis
#            uses: github/codeql-action/analyze@v3
#            with:
#              category: "/language:${{ matrix.language }}"
  
  whitelist_code_scan_alerts:
#      needs: codeql-analysis
      runs-on: ubuntu-latest
      permissions:
          # required to read and update code scan alerts
          security-events: write

          # required to checkout the repository
          contents: read
      steps:
      - name: "Check after whitelist file(s)"
        run: |
          python -c "
          import os
          import requests
          import base64
          import yaml

          token = os.getenv('GITHUB_TOKEN')
          repository = os.getenv('repository')
          external_token = os.getenv('GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY_TOKEN')
          env_file = os.getenv('GITHUB_ENV')

          headers = {
            'Accept': 'application/vnd.github+json',
            'X-GitHub-Api-Version': '2022-11-28',
            'Authorization': f'token {token}'
          }
          response = requests.get(f'https://api.github.com/repos/{repository}/contents/code_scan_config.yml', headers=headers)
          if response.status_code == 200:
            with open(env_file, 'a') as f:
              f.write('GHA_SECURITY_CODE_SCAN_WHITELIST=true\n')

            content = base64.b64decode(response.json()['content']).decode('utf-8')
            with open('whitelist.yml', 'w') as f:
              f.write(content)      

            with open('whitelist.yml', 'r') as f:
              data = yaml.load(f, Loader=yaml.SafeLoader)

            if data['spec']['inherit']:
              external_repository = data['spec']['inherit']
              headers = {
                'Accept': 'application/vnd.github+json',
                'X-GitHub-Api-Version': '2022-11-28',
                'Authorization': f'token {external_token}'
              }            
              response = requests.get(f'https://api.github.com/repos/entur/{external_repository}/contents/code_scan_config.yml', headers=headers)
              if response.status_code == 200:
                with open(env_file, 'a') as f:
                  f.write('GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST=true\n')

                content = base64.b64decode(response.json()['content']).decode('utf-8')
                with open('external_whitelist.yml', 'a') as f:
                  f.write(content)

              else:
                print('No external whitelist file found')
                print(response.status_code)
          else:
            print('No whitelist files found')
            print(response.status_code)
          "   
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY_TOKEN: ${{ secrets.external_repository_token }}
      - name: "Print variables"
        run: |
          echo ${{ env.GHA_SECURITY_CODE_SCAN_WHITELIST }}
          echo ${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY }}
      - name: Install dependencies
        if: ${{ env.GHA_SECURITY_CODE_SCAN_WHITELIST == 'true' }}
        run: |
          pip install cerberus
        shell: bash
      - name: "Validate whitelist file"
        if: ${{ env.GHA_SECURITY_CODE_SCAN_WHITELIST == 'true' }}
        run: |
          python -c "
          import yaml
          from cerberus import Validator
          import sys
          import os

          schema = {
              'apiVersion': {'type': 'string', 'required': True},
              'kind': {'type': 'string', 'required': True, 'allowed': ['CodeScanConfig']},
              'metadata': {
                  'type': 'dict', 
                  'required': True,
                  'schema': {
                      'name': {'type': 'string', 'required': True}
                  }
              },
              'spec': {
                  'type': 'dict',
                  'required': True,
                  'schema': {
                      'inherit': {'type': 'string', 'nullable': True},
                      'whitelist': {
                          'type': 'list',
                          'nullable': True,
                          'schema': {
                              'type': 'dict',
                              'schema': {
                                  'cwe': {'type': 'string', 'required': True},
                                  'comment': {'type': 'string', 'required': True},
                                  'reason': {'type': 'string', 'required': True}
                              }
                          }
                      }
                  }
              }
          }

          with open('whitelist.yml', 'r') as f:
              data = yaml.load(f, Loader=yaml.SafeLoader)
          
          v = Validator(schema)
          if v.validate(data):
              print('The whitelist file is valid.')
          else:
              print('The whitelist file is invalid. Here are the errors:')
              print(v.errors)
              sys.exit(1)

          if os.getenv('GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST') == 'true':
              with open('external_whitelist.yml', 'r') as f:
                  data = yaml.load(f, Loader=yaml.SafeLoader)
              if v.validate(data):
                  print('The external whitelist file is valid.')
              else:
                  print('The external whitelist file is invalid. Here are the errors:')
                  print(v.errors)
                  sys.exit(1)
          "
      
          
   
            
#        - name: "Checkout local whitelist"
#          id: checkout-local-whitelist
#          uses: actions/checkout@v4
#          with:
#            sparse-checkout: code_scan_config.yml
#            sparse-checkout-cone-mode: false
#        - name: "Checkout external whitelist (from private repository)"
#          id: checkout-external-whitelist-private
#          if: ${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST != '' && env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY != '' && env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY_TOKEN != '' }}
#          uses: actions/checkout@v4
#          with: 
#            repository: entur/${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY}}
#            path: './external_repository'
#            sparse-checkout: ${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST }}
#            sparse-checkout-cone-mode: false
#            token: ${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY_TOKEN }}
#        - name: "Checkout external whitelist (from public repository)"
#          id: checkout-external-whitelist-public
#          if: ${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST != '' && env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY != '' && env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY_TOKEN == '' }}
#          uses: actions/checkout@v4
#          with: 
#            repository: entur/${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY }}
#            path: './external_repository'
#            sparse-checkout: ${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST }}
#            sparse-checkout-cone-mode: false
#        - name: "Create code whitelist schema file"
#          run: |
#            cat > code_whitelist_schema.yaml << EOF
#            apiVersion: 
#              required: true
#              type: string
#              allowed:
#                - entur.io/v1alpha1
#            kind:
#                required: true
#                type: string
#                allowed:
#                  - CodeScanConfig
#            metadata:
#                required: true
#                type: dict
#                schema:
#                  name:
#                    required: true
#                    type: string
#            spec:
#              required: true
#              type: dict
#              schema:
#                whitelist:
#                  required: true
#                  type: list
#                  schema:
#                    type: dict
#                    schema:
#                      cwe:
#                        required: true
#                        type: string
#                      comment:
#                        required: true
#                        type: string
#                      reason:
#                        required: true
#                        type: string
#                        allowed:
#                        - false_positive
#                        - wont_fix
#                        - test
#            EOF
#            echo 'GHA_SECURITY_CODE_SCAN_WHITELIST_SCHEMA=code_whitelist_schema.yaml' >> $GITHUB_ENV
#        - name: "Validate local whitelist file against schema"
#          if: steps.checkout-local-whitelist.outcome == 'success'
#          uses: navikt/yaml-validator@3ab9bb9633648423b1287ec5e55b7f6c6412e074
#          with:
#            schema_path: ${{ env.GHA_SECURITY_CODE_SCAN_WHITELIST_SCHEMA }}
#            document_path: ${{ env.GHA_SECURITY_CODE_SCAN_LOCAL_WHITELIST }}
#        - name: "Validate external whitelist file against schema"
#          if: steps.checkout-external-whitelist-private.outcome == 'success' || steps.checkout-external-whitelist-public.outcome == 'success'
#          uses: navikt/yaml-validator@3ab9bb9633648423b1287ec5e55b7f6c6412e074
#          with:
#            schema_path: ${{ env.GHA_SECURITY_CODE_SCAN_WHITELIST_SCHEMA }}
#            document_path: external_repository/${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST }}
#        - name: "Get code scan alerts"
#          run: |
#            gh api \
#              --method GET \
#              -H "Accept: application/vnd.github+json" \
#              -H "X-GitHub-Api-Version: 2022-11-28" \
#              /repos/${{ github.repository }}/code-scanning/alerts \
#              -F state="open" -F ref="${{ github.ref }}" -F per_page="100" > code_scan_alerts.json
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        - name: "Whitelist code scan alerts"
#          run: |
#            python -c "
#            import yaml
#            import json
#            import os
#
#            headers = {
#            'Accept': 'application/vnd.github+json',
#            'X-GitHub-Api-Version': '2022-11-28',
#            'Authorization': 'token {}'.format(os.getenv('GITHUB_TOKEN'))
#            }
#
#            whitelist = {}
#            reason_mapping = {
#              'false_positive': 'false positive',
#              'wont_fix': 'won\'t fix',
#              'test': 'used in tests'
#            }
#
#            remote_config = None
#            try:
#              with open('external_repository/'+os.getenv('GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST'), 'r') as f: 
#                remote_config = yaml.load(f, Loader=yaml.SafeLoader)
#              for element in remote_config['spec']['whitelist']:
#                whitelist[element['cwe']] = {
#                  'comment': element['comment'],
#                  'reason': reason_mapping[element['reason']]
#                }           
#            except IOError:
#              pass
#              
#            local_config = None
#            try: 
#              with open(os.getenv('GHA_SECURITY_CODE_SCAN_LOCAL_WHITELIST'), 'r') as f:
#                local_config = yaml.load(f, Loader=yaml.SafeLoader)
#              for element in local_config['spec']['whitelist']:
#                whitelist[element['cwe']] = {
#                  'comment': element['comment'],
#                  'reason': reason_mapping[element['reason']]
#                }           
#            except IOError:
#              pass
#
#            with open('code_scan_alerts.json') as f:
#              code_scan_alerts = json.load(f)
#
#            for cwe, data in whitelist.items():
#              for alert in code_scan_alerts:
#                if 'external/cwe/'+cwe in alert['rule']['tags']:
#                  url = 'https://api.github.com/repos/{}/code-scanning/alerts/{}'.format('${{ github.repository }}', alert['number'])
#                  data_to_send = {
#                    'state': 'dismissed',
#                    'dismissed_reason': data['reason'],
#                    'dismissed_comment': data['comment']
#                  }
#                  response = requests.patch(url, headers=headers, json=data_to_send)
#            "
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
#  check-for-critical-alerts:
#    runs-on: ubuntu-latest
#    if: always() && github.event_name == 'pull_request'
#    needs: whitelist_code_scan_alerts
#    permissions: 
#        security-events: read # required to read code scan alerts
#        issues: write # required for creating issues, and/or adding issue comments
#        pull-requests: write # required for creating comments on pull requests
#    steps: 
#      - name: "Get critical code scan alerts"
#        run: |
#          alerts="$(gh api \
#            --method GET \
#            -H 'Accept: application/vnd.github+json' \
#            -H 'X-GitHub-Api-Version: 2022-11-28' \
#            /repos/${{ github.repository }}/code-scanning/alerts \
#            -F severity='critical' -F state='open' -F ref='${{ github.ref }}' -F per_page='100' )"
#            if [ "$alerts" == "[]" ]; then
#              echo 'GHA_SECURITY_CODE_SCAN_CREATE_PR_COMMENT='false >> $GITHUB_ENV
#            else
#              echo 'GHA_SECURITY_CODE_SCAN_CREATE_PR_COMMENT='true >> $GITHUB_ENV
#            fi
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: "Create comment on pull request if critical alerts are found"
#        if: env.GHA_SECURITY_CODE_SCAN_CREATE_PR_COMMENT == 'true'
#        run: |
#          gh api /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
#            -H "Accept: application/vnd.github.v3+json" \
#            --field "body=:no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: 
#              Code scan detected critical vulnerabilities in the code. Please address these vulnerabilities as soon as possible. 
#              The scan results can be found [here](https://github.com/${{ github.repository }}/security/code-scanning?query=is%3Aopen+pr%3A${{ github.event.pull_request.number }}). 
#              If you believe one or more of the reported vulnerabilities are false positives/cannot be fixed/can be ignored, please see the [Code Scan documentation](https://github.com/entur/gha-security/blob/main/README-code_scan.md#white-listing-vulnerabilities) on how to whitelist. 
#              :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry:"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}