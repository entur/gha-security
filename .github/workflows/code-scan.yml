name: 'Entur/Security/Code Scan'

on:
    workflow_call:  
      secrets: 
        external_repository_token:
          description: 'Token to access the external repository mentioned in the code_scan_config.yml file. Must have read access to the repository.'
          required: false

jobs:
#  get-repository-languages:
#      runs-on: ubuntu-latest
#      outputs: 
#          repository_languages: ${{ env.GHA_SECURITY_CODE_SCAN_REPOSITORY_LANGUAGES }} 
#      steps:
#          - name: "Get repository languages"
#            id: get-repository-languages
#            run: |
#                languages="$(gh api /repos/${{ github.repository }}/languages | \
#                  jq 'keys 
#                      | .[] as $langs
#                      | {
#                          "C":"c",
#                          "C++":"cpp",
#                          "C#":"csharp",
#                          "Go":"go",
#                          "Java":"java",
#                          "JavaScript":"javascript-typescript",
#                          "TypeScript":"javascript-typescript",
#                          "Kotlin":"kotlin",
#                          "Python":"python",
#                          "Ruby":"ruby",
#                          "Swift":"swift"
#                        } as $supported 
#                      | $langs         # operate on all the languages
#                      | $supported[.]  # and lookup their values, null if not found
#                      | select(.)      # select removes null values
#                  ' | \
#                  jq --slurp --compact-output 'unique')" # make a oneliner, and remove duplicates
#          
#                echo 'GHA_SECURITY_CODE_SCAN_REPOSITORY_LANGUAGES='$languages >> $GITHUB_ENV
#            env:
#              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  codeql-analysis:
#      runs-on: ubuntu-latest
#      needs: get-repository-languages
#      permissions:
#          # CodeQL - required for all workflows
#          security-events: write
#
#          # CodeQL - only required for workflows in private repositories
#          actions: read
#          contents: read
#      strategy:
#          fail-fast: false
#          matrix:
#              language: ${{fromJson(needs.get-repository-languages.outputs.repository_languages)}}
#      steps:
#          - name: "Checkout repository"
#            uses: actions/checkout@v4
#          - name: "Initialize CodeQL for Java"
#            if: matrix.language == 'java'
#            uses: github/codeql-action/init@v3
#            with:
#              languages: ${{ matrix.language }}
#              build-mode: none
#          - name: "Initialize CodeQL"
#            if: matrix.language != 'java'
#            uses: github/codeql-action/init@v3
#            with:
#              languages: ${{ matrix.language }}
#          - name: "Perform CodeQL Analysis"
#            id: codeql-analysis
#            uses: github/codeql-action/analyze@v3
#            with:
#              category: "/language:${{ matrix.language }}"
  
  whitelist_code_scan_alerts:
#      needs: codeql-analysis
      runs-on: ubuntu-latest
      permissions:
          # required to read and update code scan alerts
          security-events: write

          # required to checkout the repository
          contents: read
      steps:
      - name: Install dependencies -- REMEMBER TO FIX
        run: |
          pip install cerberus
        shell: bash
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Check if whitelist files exist"
        run: |
          python -c "
          import os
          import requests
          import base64
          import yaml

          external_token = os.getenv('GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY_TOKEN')
          env_file = os.getenv('GITHUB_ENV')

          external_repository = ''
          whitelist = False
          external_whitelist = False

          try:
            with open('code_scan_config.yml', 'r') as f:
              external_repository = yaml.safe_load(f).get('spec', {}).get('inherit', '')
              whitelist = True
          except IOError:
            try:
              with open('code_scan_config.yaml', 'r') as f:
                external_repository = yaml.safe_load(f).get('spec', {}).get('inherit', '')
                whitelist = True
            except IOError:
              print(f'::notice ::Whitelist file not found')
        
          if external_repository != '':
            headers = {
              'Accept': 'application/vnd.github+json',
              'X-GitHub-Api-Version': '2022-11-28',
              'Authorization': f'token {external_token}'
            }

            response = requests.get(f'https://api.github.com/repos/entur/{external_repository}/contents/code_scan_config.yml', headers=headers)
            if response.status.code != 404 or response.status.code != 200:
              print(f'::error ::Could not get external whitelist file ({response.status.code} - {response.description})')
            if response.status.code == 404:
              response = requests.get(f'https://api.github.com/repos/entur/{external_repository}/contents/code_scan_config.yaml', headers=headers)
              if response.status.code != 200:
                print(f'::error ::Could not get external whitelist file ({response.status.code} - {response.description})')
              if response.status.code == 200:
                external_whitelist = True
            if response.status.code == 200:
              external_whitelist = True

          if external_whitelist:
            with open('external_code_scan_config.yml', 'w') as f:
              f.write(base64.b64decode(response.json()['content']).decode('utf-8'))
                
          with open(env_file, 'a') as f:
            f.write(f'GHA_SECURITY_CODE_SCAN_WHITELIST={whitelist}\n')
            f.write(f'GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST={external_whitelist}\n')
          "   
        env:
          GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY_TOKEN: ${{ secrets.external_repository_token }}
      - name: "Print variables - REMEMBER TO DELETE THIS STEP"
        run: |
          echo ${{ env.GHA_SECURITY_CODE_SCAN_WHITELIST }}
          echo ${{ env.GHA_SECURITY_CODE_SCAN_EXTERNAL_REPOSITORY }}
      - name: "Validate whitelist file(s)"
        id: validate_whitelists
        if: ${{ env.GHA_SECURITY_CODE_SCAN_WHITELIST == 'True' }}
        run: |
          python -c "
          import yaml
          from cerberus import Validator
          import sys
          import os

          schema = {
              'apiVersion': {'type': 'string', 'required': True},
              'kind': {'type': 'string', 'required': True, 'allowed': ['CodeScanConfig']},
              'metadata': {
                  'type': 'dict', 
                  'required': True,
                  'schema': {
                      'name': {'type': 'string', 'required': True}
                  }
              },
              'spec': {
                  'type': 'dict',
                  'required': True,
                  'schema': {
                      'inherit': {'type': 'string' },
                      'whitelist': {
                          'type': 'list',
                          'minlength': 1,
                          'schema': {
                              'type': 'dict',
                              'schema': {
                                  'cwe': {'type': 'string', 'required': True},
                                  'comment': {'type': 'string', 'required': True},
                                  'reason': {'type': 'string', 'required': True}
                              }
                          }
                      }
                  }
              }
          }
          v = Validator(schema)
          
          data = ''
          try:
            with open('code_scan_config.yml', 'r') as f:
              data = yaml.safe_load(f)
          except IOError:
            try:
              with open('code_scan_config.yaml', 'r') as f:
                data = yaml.safe_load(f)
            except IOError:
              print('::error ::Whitelist file not found')
              sys.exit(1)
          if v.validate(data):
              print('The whitelist file is valid.')
          else:
              print(f'error ::The whitelist file is invalid. Here are the errors: {v.errors}')
              sys.exit(1)
              
          if env.GHA_SECURITY_CODE_SCAN_EXTERNAL_WHITELIST == 'True':  
            data = ''
            try:
              with open('external_code_scan_config.yml', 'r') as f:
                data = yaml.safe_load(f)
            except IOError:
              print('::error ::External whitelist file not found')
              sys.exit(1)
            if v.validate(data):
                print('The external whitelist file is valid.')
            else:
                print(f'error ::The external whitelist file is invalid. Here are the errors: {v.errors}')
                print('The external whitelist file is invalid. Here are the errors:')
                print(v.errors)
                sys.exit(1)
          "
      - name: "Get code scan alerts -- REMEMBER TO FIX"
        run: |
          gh api \
            --method GET \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/code-scanning/alerts \
            -F state="open" -F ref="${{ github.ref }}" -F per_page="100" > code_scan_alerts.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Whitelist code scan alerts"
        if: steps.validate_whitelists.outcome == 'success'
        run: |
          python -c "
          import yaml
          import json
          import os

          headers = {
          'Accept': 'application/vnd.github+json',
          'X-GitHub-Api-Version': '2022-11-28',
          'Authorization': 'token {}'.format(os.getenv('GITHUB_TOKEN'))
          }

          whitelist = {}
          reason_mapping = {
            'false_positive': 'false positive',
            'wont_fix': 'won\'t fix',
            'test': 'used in tests'
          }
            
          remote_config = None
          try:
            with open('external_code_scan_config.yml'), 'r') as f: 
              remote_config = yaml.safe_load(f)
            for element in remote_config['spec']['whitelist']:
              whitelist[element['cwe']] = {
                'comment': element['comment'],
                'reason': reason_mapping[element['reason']]
              }           
          except (IOError, KeyError):
            pass
            
          local_config = None
          try: 
            with open('code_scan_config.yml'), 'r') as f:
              local_config = yaml.safe_load(f)
            for element in local_config['spec']['whitelist']:
              whitelist[element['cwe']] = {
                'comment': element['comment'],
                'reason': reason_mapping[element['reason']]
              }           
          except IOError:
            try: 
              with open('code_scan_config.yaml'), 'r') as f:
                local_config = yaml.safe_load(f)
              for element in local_config['spec']['whitelist']:
                whitelist[element['cwe']] = {
                  'comment': element['comment'],
                  'reason': reason_mapping[element['reason']]
                }
            except (IOError, KeyError):
              pass
          except KeyError:
            pass

          with open('code_scan_alerts.json') as f:
            code_scan_alerts = json.load(f)
          for cwe, data in whitelist.items():
            for alert in code_scan_alerts:
              if 'external/cwe/'+cwe in alert['rule']['tags']:
                url = 'https://api.github.com/repos/{}/code-scanning/alerts/{}'.format('${{ github.repository }}', alert['number'])
                data_to_send = {
                  'state': 'dismissed',
                  'dismissed_reason': data['reason'],
                  'dismissed_comment': data['comment']
                }
                response = requests.patch(url, headers=headers, json=data_to_send)
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  check-for-critical-alerts:
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    needs: whitelist_code_scan_alerts
    permissions: 
        security-events: read # required to read code scan alerts
        issues: write # required for creating issues, and/or adding issue comments
        pull-requests: write # required for creating comments on pull requests
    steps: 
      - name: "Get critical code scan alerts"
        run: |
          alerts="$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            /repos/${{ github.repository }}/code-scanning/alerts \
            -F severity='critical' -F state='open' -F ref='${{ github.ref }}' -F per_page='100' )"
            if [ "$alerts" == "[]" ]; then
              echo 'GHA_SECURITY_CODE_SCAN_CREATE_PR_COMMENT='False >> $GITHUB_ENV
            else
              echo 'GHA_SECURITY_CODE_SCAN_CREATE_PR_COMMENT='True >> $GITHUB_ENV
            fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Create comment on pull request if critical alerts are found"
        if: env.GHA_SECURITY_CODE_SCAN_CREATE_PR_COMMENT == 'True'
        run: |
          gh api /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -H "Accept: application/vnd.github.v3+json" \
            --field "body=:no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: 
              Code scan detected critical vulnerabilities in the code. Please address these vulnerabilities as soon as possible. 
              The scan results can be found [here](https://github.com/${{ github.repository }}/security/code-scanning?query=is%3Aopen+pr%3A${{ github.event.pull_request.number }}). 
              If you believe one or more of the reported vulnerabilities are false positives/cannot be fixed/can be ignored, please see the [Code Scan documentation](https://github.com/entur/gha-security/blob/main/README-code_scan.md#white-listing-vulnerabilities) on how to whitelist. 
              :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry:"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}