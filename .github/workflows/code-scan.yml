name: 'Entur/Security/Code Scan'

on:
    workflow_call: 
      inputs:
        code-whitelist:
          description: 'Whitelisting file for code scanning alerts, located in the same repository. Must be in the root of the repository'
          type: string
          required: false
        external-code-whitelist:
          description: 'Whitelisting file for code scanning alerts, located in a different repository. Must be in the root of the repository'
          type: string
          required: false
        external-code-whitelist-repository:
          description: 'Repository containing the external whitelisting file'
          type: string
          required: false
        
jobs:
#  get-repository-languages:
#      runs-on: ubuntu-latest
#      outputs: 
#          repository_languages: ${{ env.GHA_SECURITY_CODE_SCANNING_REPOSITORY_LANGUAGES }} 
#      steps:
#          - name: "Get repository languages"
#            id: get-repository-languages
#            run: |
#                languages="$(gh api /repos/${{ github.repository }}/languages | \
#                  jq 'keys 
#                      | .[] as $langs
#                      | {
#                          "C":"c",
#                          "C++":"cpp",
#                          "C#":"csharp",
#                          "Go":"go",
#                          "Java":"java",
#                          "JavaScript":"javascript-typescript",
#                          "TypeScript":"javascript-typescript",
#                          "Kotlin":"kotlin",
#                          "Python":"python",
#                          "Ruby":"ruby",
#                          "Swift":"swift"
#                        } as $supported 
#                      | $langs         # operate on all the languages
#                      | $supported[.]  # and lookup their values, null if not found
#                      | select(.)      # select removes null values
#                  ' | \
#                  jq --slurp --compact-output 'unique')" # make a oneliner, and remove duplicates
#          
#                echo 'GHA_SECURITY_CODE_SCANNING_REPOSITORY_LANGUAGES='$languages >> $GITHUB_ENV
#            env:
#              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  codeql-analysis:
#      runs-on: ubuntu-latest
#      needs: get-repository-languages
#      permissions:
#          # CodeQL - required for all workflows
#          security-events: write
#
#          # CodeQL - only required for workflows in private repositories
#          actions: read
#          contents: read
#      strategy:
#          fail-fast: false
#          matrix:
#              language: ${{fromJson(needs.get-repository-languages.outputs.repository_languages)}}
#      steps:
#          - name: "Checkout repository"
#            uses: actions/checkout@v4
#          - name: "Initialize CodeQL for Java"
#            if: matrix.language == 'java'
#            uses: github/codeql-action/init@v3
#            with:
#              languages: ${{ matrix.language }}
#              build-mode: none
#          - name: "Initialize CodeQL"
#            if: matrix.language != 'java'
#            uses: github/codeql-action/init@v3
#            with:
#              languages: ${{ matrix.language }}
#          - name: "Perform CodeQL Analysis"
#            id: codeql-analysis
#            uses: github/codeql-action/analyze@v3
#            with:
#              category: "/language:${{ matrix.language }}"
  
  whitelist_code_scanning_alerts:
      if: ${{ inputs.code-whitelist != '' }} || ${{ inputs.external-code-whitelist != '' }}
      runs-on: ubuntu-latest
      permissions:
          # required to read and update code scanning alerts
          security-events: write

          # required to checkout the repository
          contents: read
      steps:
        - name: "Checkout local whitelist"
          if: ${{ inputs.code-whitelist != '' }}
          uses: actions/checkout@v4
          with:
            sparse-checkout: ${{ inputs.code-whitelist }}
            sparse-checkout-cone-mode: false
        - name: "Checkout external whitelist"
          if: ${{ inputs.external-code-whitelist != '' }}
          uses: actions/checkout@v4
          with: 
            repository: entur/${{ inputs.external-code-whitelist-repository }}
            path: './external_repository'
            sparse-checkout: ${{ inputs.external-code-whitelist }}
            sparse-checkout-cone-mode: false
        - name: "Create code whitelist schema file"
          run: |
            cat > code_whitelist_schema.yaml << EOF
            apiVersion: 
              required: true
              type: string
              allowed:
                - entur.io/v1alpha1
            kind:
                required: true
                type: string
                allowed:
                  - CodeScanConfig
            metadata:
                required: true
                type: dict
                schema:
                  name:
                    required: true
                    type: string
            spec:
              required: true
              type: dict
              schema:
                whitelist:
                  required: true
                  type: list
                  schema:
                    type: dict
                    schema:
                      cwe:
                        required: true
                        type: string
                      comment:
                        required: true
                        type: string
                      reason:
                        required: true
                        type: string
                        allowed:
                        - false_positive
                        - wont_fix
                        - test
            EOF
            echo 'GHA_SECURITY_CODE_SCAN_CODE_WHITELIST_SCHEMA=code_whitelist_schema.yaml' >> $GITHUB_ENV
        - name: "Validate local code scanning whitelist file against schema"
          if: ${{ inputs.code-whitelist != '' }}
          uses: navikt/yaml-validator@3ab9bb9633648423b1287ec5e55b7f6c6412e074
          with:
            schema_path: ${{ env.GHA_SECURITY_CODE_SCAN_CODE_WHITELIST_SCHEMA }}
            document_path: ${{ inputs.code-whitelist }}
        - name: "Validate external code scanning whitelist file against schema"
          if: ${{ inputs.external-code-whitelist != '' }}
          uses: navikt/yaml-validator@3ab9bb9633648423b1287ec5e55b7f6c6412e074
          with:
            schema_path: ${{ env.GHA_SECURITY_CODE_SCAN_CODE_WHITELIST_SCHEMA }}
            document_path: external_repository/${{ inputs.external-code-whitelist }}
        - name: "Get code scanning alerts"
          run: |
            gh api \
              --method GET \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/code-scanning/alerts \
              -F state="open" -F ref="${{ github.ref }}" -F per_page="100" > code_scanning_alerts.json
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: "Whitelist code scanning alerts"
          run: |
            python -c "
            import yaml
            import json
            import os

            headers = {
            'Accept': 'application/vnd.github+json',
            'X-GitHub-Api-Version': '2022-11-28',
            'Authorization': 'token {}'.format(os.getenv('GITHUB_TOKEN'))
            }

            whitelist = {}
            reason_mapping = {
              'false_positive': 'false positive',
              'wont_fix': 'won\'t fix',
              'test': 'used in tests'
            }

            remote_config = None
            try: 
              with open(os.getenv('GHA_SECURITY_CODE_SCANNING_EXTERNAL_WHITELIST'), 'r') as f: 
                remote_config = yaml.load(f, Loader=yaml.SafeLoader)
              for element in remote_config['spec']['whitelist']:
                whitelist[element['cwe']] = {
                  'comment': element['comment'],
                  'reason': reason_mapping[element['reason']]
                }           
            except e:
              pass
              
            local_config = None
            try: 
              with open(os.getenv('GHA_SECURITY_CODE_SCANNING_WHITELIST'), 'r') as f:
                local_config = yaml.load(f, Loader=yaml.SafeLoader)
              for element in local_config['spec']['whitelist']:
                whitelist[element['cwe']] = {
                  'comment': element['comment'],
                  'reason': reason_mapping[element['reason']]
                }           
            except e:
              pass

            print(whitelist)

            with open('code_scanning_alerts.json') as f:
              code_scanning_alerts = json.load(f)

            for cwe, data in whitelist.items():
              for alert in code_scanning_alerts:
                if 'external/cwe/'+cwe in alert['rule']['tags']:
                  url = 'https://api.github.com/repos/{}/code-scanning/alerts/{}'.format('${{ github.repository }}', alert['number'])
                  data_to_send = {
                    'state': 'dismissed',
                    'dismissed_reason': data['reason'],
                    'dismissed_comment': data['comment']
                  }
                  response = requests.patch(url, headers=headers, json=data_to_send)
            "
          env:
            GHA_SECURITY_CODE_SCANNING_WHITELIST: ${{ inputs.code-whitelist }}
            GHA_SECURITY_CODE_SCANNING_EXTERNAL_WHITELIST: external_repository/${{ inputs.external-code-whitelist }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
#  check-for-critical-alerts:
#    runs-on: ubuntu-latest
#    if: always() && github.event_name == 'pull_request'
#    needs: whitelist_code_scanning_alerts
#    permissions: 
#        security-events: read # required to read code scanning alerts
#        issues: write # required for creating issues, and/or adding issue comments
#        pull-requests: write # required for creating comments on pull requests
#    steps: 
#      - name: "Get critical code scanning alerts"
#        run: |
#          alerts="$(gh api \
#            --method GET \
#            -H 'Accept: application/vnd.github+json' \
#            -H 'X-GitHub-Api-Version: 2022-11-28' \
#            /repos/${{ github.repository }}/code-scanning/alerts \
#            -F severity='critical' -F state='open' -F ref='${{ github.ref }}' -F per_page='100' )"
#            if [ "$alerts" == "[]" ]; then
#              echo 'GHA_SECURITY_CODE_SCANNING_CREATE_PR_COMMENT='false >> $GITHUB_ENV
#            else
#              echo 'GHA_SECURITY_CODE_SCANNING_CREATE_PR_COMMENT='true >> $GITHUB_ENV
#            fi
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: "Create comment on pull request if critical alerts are found"
#        if: env.GHA_SECURITY_CODE_SCANNING_CREATE_PR_COMMENT == 'true'
#        run: |
#          gh api /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
#            -H "Accept: application/vnd.github.v3+json" \
#            --field "body=:no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: 
#              Code scanning detected critical vulnerabilities in the code. In order to merge, please address these issues first. 
#              The scan results can be found [here](https://github.com/${{ github.repository }}/security/code-scanning?query=is%3Aopen+pr%3A${{ github.event.pull_request.number }}). 
#              If you believe one or more of the reported vulnerabilities are false positives/cannot be fixed/can be ignored, please see the [Code Scanning documentation](https://github.com/entur/gha-security/blob/code-scanning-ruleset/README-code-scanning.md#white-listing-vulnerabilities) on how to whitelist. 
#              :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry:"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}