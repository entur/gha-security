name: 'Entur/Security/Code Scan'

on:
  workflow_call:
    inputs:
      use_setup_gradle:
        description: 'OBSOLETE. This is now autodetected and enabled if `build.gradle(.kt(s))` is found. Uses "gradle/action/setup-gradle" before running autobuild (Java/Kotlin only). Potentially speeds up build times if cache from main branch is utilized'
        default: false
        required: false
        type: boolean
      codeql_queries:
        description: 'Comma-separated list of queries for CodeQL to run. By default is set to security-extended.'
        default: "security-extended"
        required: false
        type: string
      job_runner:
        description: 'Customizable job runner for CodeQL jobs that require a little extra performance/memory. List of runners is available in [Confluence](https://enturas.atlassian.net/wiki/spaces/ESP/pages/4989059095/GitHub+Actions+Runners).'
        default: "ubuntu-24.04"
        required: false
        type: string
      gradle_opts:
        description: '[Gradle build options](https://docs.gradle.org/current/userguide/build_environment.html#environment_variables_reference) to pass on to the CodeQL scanner'
        default: "-Dorg.gradle.jvmargs=-Xmx4g"
        required: false
        type: string
    secrets:
      external_repository_token:
        description: 'Token to access the external repository mentioned in the codescan.yml file. Must have read access to the repository.'
        required: false
env:
  GITHUB_REPOSITORY: ${{ github.repository }}
  GIT_REF: ${{ github.ref }}

jobs:
  input-validation:
    runs-on: ubuntu-24.04
    steps:
      - name: "Validate inputs"
        env:
          CODEQL_QUERIES: ${{ inputs.codeql_queries }}
          JOB_RUNNER: ${{ inputs.job_runner }}
        run: |
          python -c "import re
          import os
          codeql_queries = os.environ['CODEQL_QUERIES']
          regex_matches = re.findall(r'[^,\s?]+', codeql_queries)
          job_runner = os.environ['JOB_RUNNER']
          # Supported runners documented in confluence: https://enturas.atlassian.net/wiki/spaces/ESP/pages/4989059095/GitHub+Actions+Runners
          supported_runners = [
            'ubuntu-latest',
            'ubuntu-24.04',
            'ubuntu-22.04',
            'ubuntu-20.04',
            'windows-latest',
            'windows-2025',
            'windows-2022',
            'windows-2019',
            'macos-latest',
            'macos-15',
            'macos-14',
            'macos-13',
            'grp-ubuntu-24.04-2core-x64',
            'grp-ubuntu-24.04-4core-x64',
            'grp-ubuntu-24.04-8core-x64',
            'grp-ubuntu-24.04-16core-x64',
            'grp-ubuntu-22.04-4core-x64',
            'grp-ubuntu-24.04-2core-a64',
            ]
          
          if (len(regex_matches) <= 0):
            print('::error ::Invalid input. codeql_queries is set to invalid list. Use a comma-separated list: default, security-extended')
            exit(1)
          
          if (not job_runner in supported_runners):
            print('::error ::Invalid input. Supported runners are: ', supported_runners)
            exit(1)
          
          os.system('echo Validation passed')"
  upload-cached-results:
    runs-on:  ubuntu-24.04
    needs: input-validation
    outputs:
      skip_job_and_continue_scan: ${{ env.GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN }}
    permissions:
      pull-requests: read
      actions: read
      security-events: write
      contents: write 
    steps:
      - name: "Skip job if not triggered by a push to main/master"
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REFNAME: ${{ github.ref_name }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          if [ "$GITHUB_EVENT_NAME" = "push" ] && [ "$GITHUB_REFNAME" = "$GITHUB_DEFAULT_BRANCH" ]; then
            echo 'GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN=False' >> $GITHUB_ENV
          else
            echo 'GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN=True' >> $GITHUB_ENV
          fi
      - name: "Get workflow run ID for matching PR"
        if: ${{ env.GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN == 'False' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          HEAD_REF=$(gh pr list --state merged --search "$GITHUB_SHA" --json headRefOid -R $GITHUB_REPOSITORY | jq -r '.[0].headRefOid')
          if [ "$HEAD_REF" = "null" ]; then
            echo "::warning ::Failed to fetch closed PRs, defaulting to running a new scan"
            echo 'GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN=True' >> $GITHUB_ENV
          else
            JOB_ID=$(gh run list -s completed -e pull_request -c "$HEAD_REF" --json databaseId -R $GITHUB_REPOSITORY -w ".github/workflows/codeql.yml" | 
              jq -r '.[0].databaseId')
            if [ "$JOB_ID" = "null" ]; then
              echo '::warning ::Failed to find a matching job, defaulting to running a new scan'
              echo 'GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN=True' >> $GITHUB_ENV
            else
              echo "GHA_SECURITY_CODE_SCAN_WORKFLOW_RUN_ID=$JOB_ID" >> $GITHUB_ENV
            fi
          fi

      - name: "Download existing cached results from previous job (pr)"
        if: ${{ env.GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN == 'False' }}
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ env.GHA_SECURITY_CODE_SCAN_WORKFLOW_RUN_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: "/home/runner/work/${{ env.GITHUB_REPOSITORY }}/results"

      - name: "Upload scan results"
        if: ${{ env.GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN == 'False' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "/home/runner/work/${{ env.GITHUB_REPOSITORY }}/results"
          category: 'scan-results'

      - name: "Upload dependency graph"
        if: ${{ env.GHA_SECURITY_CODE_SCAN_SKIP_JOB_AND_CONTINUE_SCAN == 'False' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          shopt -s globstar nullglob
          for file in /home/runner/work/$GITHUB_REPOSITORY/results/**/*.json ; do
            if [ -d $file ] ; then
              continue
            fi
            jq ".sha = \"$GITHUB_SHA\" | .ref = \"$GITHUB_REF\"" <$file | 
              gh api /repos/$GITHUB_REPOSITORY/dependency-graph/snapshots --method POST --input -
          done

  get-repository-metadata:
    if: ${{ needs.upload-cached-results.outputs.skip_job_and_continue_scan == 'True' }}
    runs-on: ubuntu-24.04
    needs: upload-cached-results
    outputs: 
      codeql_languages: ${{ env.GHA_SECURITY_CODE_SCAN_REPOSITORY_LANGUAGES_CQ }}
      semgrep_languages: ${{ env.GHA_SECURITY_CODE_SCAN_REPOSITORY_LANGUAGES_SEM }} 
      found_gradle: ${{ env.GHA_SECURITY_CODE_SCAN_FOUND_GRADLE }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Find Gradle Build"
        id: find-gradle-build
        run: |
          # Search for the file(s) build.gradle or build.gradle.kt(s) in the repo, and report if any of those are found
          if [ $(find . -type f -iname build.gradle -o -iname build.gradle.kts -o -iname build.gradle.kt | wc -l) -gt 0 ]; then
            echo "GHA_SECURITY_CODE_SCAN_FOUND_GRADLE=True" >> $GITHUB_ENV
          else
            echo "GHA_SECURITY_CODE_SCAN_FOUND_GRADLE=False" >> $GITHUB_ENV
          fi

      - name: "Get repository languages"
        id: get-repository-languages
        run: |
          REPO_FILE_TYPES=$(find . -path "./.git" -prune -o -type f -name "*.*" | sed "s|.*\.||" | tr "[:upper:]" "[:lower:]" | sort -u)
          export REPO_FILE_TYPES=$(echo "$REPO_FILE_TYPES" | jq -R -s -c 'split("\n")[:-1]')

          python -c "
          import os
          import json

          env_file = os.getenv('GITHUB_ENV', '')
          file_types = os.getenv('REPO_FILE_TYPES', '')
          try:
            file_types = json.loads(file_types)
          except:
            pass

          if not isinstance(file_types, list):
            file_types = []

          # See https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/
          codeql_languages = set()
          _codeql_mappings = {
            # Python
            'py': 'python',
            # Ruby
            'rb': 'ruby',
            'erb': 'ruby',
            'gemspec': 'ruby',
            'gemfile': 'ruby',
            # Swift
            'swift': 'swift',
            # Kotlin
            'kt': 'kotlin',
            # Java
            'java': 'java',
            # CSharp
            'sln': 'csharp',
            'csproj': 'csharp',
            'cs': 'csharp',
            'cshtml': 'csharp',
            'xaml': 'csharp',
            # Golang
            'go': 'go',
            # CPP
            'cpp': 'cpp',
            'c++': 'cpp',
            'cxx': 'cpp',
            'hpp': 'cpp',
            'hh': 'cpp',
            'h++': 'cpp',
            'hxx': 'cpp',
            'c': 'cpp',
            'cc': 'cpp',
            'h': 'cpp',
            # Typescript
            'ts': 'javascript-typescript',
            'tsx': 'javascript-typescript',
            'mts': 'javascript-typescript',
            'cts': 'javascript-typescript',
            # Javascript
            'js': 'javascript-typescript',
            'jsx': 'javascript-typescript',
            'mjs': 'javascript-typescript',
            'es': 'javascript-typescript',
            'es6': 'javascript-typescript',
            'vue': 'javascript-typescript',
            'ejs': 'javascript-typescript',
            'htm': 'javascript-typescript',
            'html': 'javascript-typescript',
            'xhtm': 'javascript-typescript',
            'xhtml': 'javascript-typescript',
            # Misc
            'yml': 'javascript-typescript',
            'yaml': 'javascript-typescript',
            'raml': 'javascript-typescript',
            'xml': 'javascript-typescript',
            'json': 'javascript-typescript',
            'njk': 'javascript-typescript',
            'hbs': 'javascript-typescript',
          }
          
          semgrep_languages = set()
          _semgrep_mappings = {
            # Scala
            'scala': 'scala',
            'sc': 'scala',
          }

          for file_type in file_types:
            if (lang := _codeql_mappings.get(file_type, None)) is not None:
              codeql_languages.add(lang) 
            if (lang := _semgrep_mappings.get(file_type, None)) is not None:
              semgrep_languages.add(lang)

          codeql_languages = list(codeql_languages)
          semgrep_languages = list(semgrep_languages)

          with open(env_file, 'a') as f:
            f.write(f'GHA_SECURITY_CODE_SCAN_REPOSITORY_LANGUAGES_CQ={str(codeql_languages)}\n')
            f.write(f'GHA_SECURITY_CODE_SCAN_REPOSITORY_LANGUAGES_SEM={str(semgrep_languages)}\n')
          "

  semgrep-analysis:
    # See https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#scanning-on-push
    # If we found a language, and the event is not a push made by dependabot on a PR
    if: ${{ needs.get-repository-metadata.outputs.semgrep_languages != '[]' && (github.event != 'push' || (github.event == 'push' && github.actor != 'dependabot[bot]')) }}
    runs-on: ubuntu-24.04
    needs: get-repository-metadata
    permissions:
      # Semgrep - required for all workflows
      security-events: write
      # Semgrep - only required for workflows in private repositories
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ${{ fromJson(needs.get-repository-metadata.outputs.semgrep_languages) }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Set up Semgrep"
        run: |
          python3 -m pip install semgrep

      - name: "Scan with Semgrep"
        run: |
          semgrep scan --sarif \
          --sarif-output=semgrep.sarif \
          --no-secrets-validation \
          --metrics=off \
          --config=p/scala \
          --exclude=*.c \
          --exclude=*.h \
          --exclude=*.cpp \
          --exclude=*.cxx \
          --exclude=*.cc \
          --exclude=*.hxx \
          --exclude=*.cs \
          --exclude=*.go \
          --exclude=*.java \
          --exclude=*.js \
          --exclude=*.ts \
          --exclude=*.kt \
          --exclude=*.py \
          --exclude=*.rb \
          --exclude=*.tf \
          --exclude=*.json \
          --exclude=*.swift

      - name: "Upload Semgrep report"
        id: upload-semgrep-report
        uses: github/codeql-action/upload-sarif@v3
        with: 
          sarif_file: semgrep.sarif
          category: 'semgrep-scan'

      - name: "Upload Semgrep report as artifact"
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-${{ matrix.language }}-sarif
          path: semgrep.sarif
          overwrite: true

  codeql-analysis:
    # See https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#scanning-on-push
    # If we found a language, and the event is not a push made by dependabot on a PR
    if: ${{ needs.get-repository-metadata.outputs.codeql_languages != '[]' && (github.event != 'push' || (github.event == 'push' && github.actor != 'dependabot[bot]')) }}
    # Runners are selected by labels: (default when you pass a string directly to runs-on) or group: "grp-runner". This snippet of code uses JSON to construct the group: object if the runner name starts with "grp-"
    runs-on:  ${{ startsWith(inputs.job_runner, 'grp-') && fromJSON(format('{{"group":"{0}"}}', inputs.job_runner)) || inputs.job_runner }}
    needs: get-repository-metadata
    permissions:
      # CodeQL - required for all workflows
      security-events: write
      # CodeQL - only required for workflows in private repositories
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        language: ${{ fromJson(needs.get-repository-metadata.outputs.codeql_languages) }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Set up Gradle for Java/Kotlin"
        if: needs.get-repository-metadata.outputs.found_gradle == 'True' && (matrix.language == 'kotlin' || matrix.language == 'java')
        uses: gradle/actions/setup-gradle@v4
        with: 
          cache-read-only: true  # Force read only, even in main
          add-job-summary: 'on-failure'
          dependency-graph: ${{ github.ref_name == github.event.repository.default_branch && 'generate-submit-and-upload' || 'generate-and-upload' }}

      - name: "Initialize CodeQL for Java/Kotlin"
        if: matrix.language == 'kotlin' || matrix.language == 'java'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: autobuild
          queries: ${{ inputs.codeql_queries }}

      - name: "Initialize CodeQL"
        if: matrix.language != 'java' && matrix.language != 'kotlin'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: ${{ inputs.codeql_queries }}

      - name: "Perform CodeQL Analysis"
        id: codeql-analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
        env:
          ARTIFACTORY_AUTH_USER: ${{ secrets.ARTIFACTORY_AUTH_USER }}
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_AUTH_USER }} # Kept for backwards compatability
          ARTIFACTORY_AUTH_TOKEN: ${{ secrets.ARTIFACTORY_AUTH_TOKEN }}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_URL }}
          ARTIFACTORY_APIKEY: ${{ secrets.ARTIFACTORY_APIKEY }}
          GRADLE_OPTS: ${{ inputs.gradle_opts }}
          IS_CODEQL_SCAN: true

      - name: "Get repository name"
        run: |
          REPOSITORY_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          echo "REPOSITORY_NAME=$REPOSITORY_NAME" >> $GITHUB_ENV

      - name: "Upload CodeQL report as artifact"
        uses: actions/upload-artifact@v4
        with:
          name: codeql-${{ matrix.language }}-sarif
          path: "/home/runner/work/${{ env.REPOSITORY_NAME }}/results"
          overwrite: true

  run-scanner-action:
    needs: [codeql-analysis, semgrep-analysis]
    if: |
      always() && 
      (needs.codeql-analysis.result == 'success' || needs.semgrep-analysis.result == 'success')
    runs-on: ubuntu-24.04
    permissions:
      # required to read and update code scan alerts
      security-events: write
      # required to checkout the repository
      contents: read
    outputs:
      notification_severity_threshold: ${{ steps.scanner-action.outputs.notification_severity_threshold }}
      notification_slack_channel_id: ${{ steps.scanner-action.outputs.notification_slack_channel_id }}
      notification_slack_enabled: ${{ steps.scanner-action.outputs.notification_slack_enabled }}
      notification_pull_request_enabled: ${{ steps.scanner-action.outputs.notification_pull_request_enabled }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      
      - name: Scanner Action
        id: scanner-action
        uses: entur/gha-security/scanner-action@feature/SIK-1484
        with:
          scanner: 'codescan'
          token: ${{ secrets.GITHUB_TOKEN }}
          external-repository-token: ${{ secrets.external_repository_token }}
      - name: "Print Output"
        id: output
        env:
          OUTPUT: ${{ toJson(steps.scanner-action.outputs) }}
        run: echo "$OUTPUT"

  check-for-critical-alerts:
    runs-on: ubuntu-24.04
    if: ${{ always() }}
    needs: [run-scanner-action]
    permissions: 
      security-events: read # required to read code scan alerts
      issues: write # required for creating issues, and/or adding issue comments
      pull-requests: write # required for creating comments on pull requests
    steps: 
    - name: "Get critical code scan alerts"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set +e # Do not exit if a command fails
        get_alerts () {
          alerts="$(gh api \
          --method GET \
          -H 'Accept: application/vnd.github+json' \
          -H 'X-GitHub-Api-Version: 2022-11-28' \
          /repos/${GITHUB_REPOSITORY}/code-scanning/alerts \
          -F severity="$1" -F state='open' -F ref='$GIT_REF' -F per_page='100' -F tool_name="$2" --paginate)"
          alerts_exit_code=$? # Save exit code from gh api command
        }
        get_alerts "error" "Semgrep OSS"
        semgrep_alerts=$alerts
        
        get_alerts "critical" "CodeQL"
        codeql_alerts=$alerts
        
        if [ $alerts_exit_code != 0 ]; then
            echo "Failed to get alerts from Github. The previous upload vulnerability report step might have failed to be processed/uploaded. Try running the job again"
            echo '## Code Scan - Failed to get alerts.
            Upload vulnerability report step might have failed to be processed/uploaded.
            Try running the job again' >> $GITHUB_STEP_SUMMARY
            exit 1
        else
          if [ "$semgrep_alerts" == "[]" ] && [ "$codeql_alerts" == "[]" ]; then
            echo 'GHA_SECURITY_CODE_SCAN_CREATE_ALERT_COMMENT='False >> $GITHUB_ENV
          else
            echo 'GHA_SECURITY_CODE_SCAN_CREATE_ALERT_COMMENT='True >> $GITHUB_ENV
          fi
        fi

    - name: "Print to job summary if critical alerts are found"
      if: ${{ env.GHA_SECURITY_CODE_SCAN_CREATE_ALERT_COMMENT == 'True' }}
      env:
        REPOSITORY: ${{ github.repository }}
      run: |
        echo '## ⛔ Code Scan - Critical Vulnerabilities ⛔
        **Code scan detected critical vulnerabilities in the code that needs to be addressed.**
        ### Results
        The scan results can be found [here](https://github.com/'"$REPOSITORY"'/security/code-scanning?query=is%3Aopen+ref%3A'"$GIT_REF"')
        ### Allowlist
        Use the allowlist if you want to ignore vulnerabilities that do not affect the repository.  
        See the [Code Scan documentation](https://github.com/entur/gha-security/blob/main/README-code-scan.md#allow-lists) on how to use allowlist.' >> $GITHUB_STEP_SUMMARY

    - name: "Create comment on pull request if critical alerts are found"
      if: ${{ env.GHA_SECURITY_CODE_SCAN_CREATE_ALERT_COMMENT == 'True' && github.event_name == 'pull_request' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        gh pr comment $PR_NUMBER --repo $GITHUB_REPOSITORY -b "## ⛔ Code Scan - Critical Vulnerabilities ⛔
        **Code scan found critical vulnerabilities in the code that needs to be addressed.**
        ### Results
        The scan results can be found [here](https://github.com/${GITHUB_REPOSITORY}/security/code-scanning?query=is%3Aopen+pr%3A$PR_NUMBER)
        ### Allowlist
        Use the allowlist if you want to ignore vulnerabilities that do not affect the repository.  
        See the [Code Scan documentation](https://github.com/entur/gha-security/blob/main/README-code-scan.md#allow-lists) on how to use allowlist."
        
  notifications:
    if: ${{ always() && (
        needs.run-scanner-action.outputs.notification_slack_enabled == 'True' || 
        needs.run-scanner-action.outputs.notification_pull_request_enabled == 'True') }}
    needs: [ run-scanner-action ]
    runs-on: ubuntu-24.04
    permissions:
      security-events: read # required to read code scan alerts
      pull-requests: write # required for creating comments on pull requests
    outputs:
      alerts_found: ${{ steps.check-alerts.outputs.ALERTS_FOUND }}
      notification_message: ${{ steps.notification-message.outputs.NOTIFICATION_MESSAGE }}
    steps:
      - name: "Check alerts"
        id: check-alerts
        env:
          SEVERITY_THRESHOLD: ${{ needs.run-scanner-action.outputs.notification_severity_threshold }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e # Do not exit if a command fails
          get_alerts () {
            alerts="$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            /repos/${GITHUB_REPOSITORY}/code-scanning/alerts \
            -F severity="$1" -F state='open' -F ref='${{ github.ref }}' -F per_page='100' -F tool_name="$2" --paginate)"
            alerts_exit_code=$? # Save exit code from gh api command
          }
          
          get_alerts "$SEVERITY_THRESHOLD" "CodeQL"
          
          if [ "$alerts" == "[]" ]; then
            echo 'ALERTS_FOUND='False >> $GITHUB_OUTPUT
          else
            echo 'ALERTS_FOUND='True >> $GITHUB_OUTPUT
          fi
      - name: "Notification message"
        id: notification-message
        if: ${{ steps.check-alerts.outputs.ALERTS_FOUND == 'True' }}
        env:
          SEVERITY_THRESHOLD: ${{ needs.run-scanner-action.outputs.notification_severity_threshold }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          {
            echo "NOTIFICATION_MESSAGE<<EOF"
            echo "## Code Scan - $SEVERITY_THRESHOLD Alert(s) found
          ### Results
          The scan results can be found [here](https://github.com/${GITHUB_REPOSITORY}/security/code-scanning?query=is%3Aopen+pr%3A$PR_NUMBER)
          ### Allowlist
          Use the allowlist if you want to ignore vulnerabilities that do not affect the repository.
          See the [Code Scan documentation](https://github.com/entur/gha-security/blob/main/README-code-scan.md#allow-lists) on how to use allowlist."
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: "Pull Request notification output"
        if: ${{ steps.check-alerts.outputs.ALERTS_FOUND == 'True' && needs.run-scanner-action.outputs.notification_pull_request_enabled == 'True' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTIFICATION_MESSAGE: ${{ steps.notification-message.outputs.NOTIFICATION_MESSAGE }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr comment $PR_NUMBER --repo $GITHUB_REPOSITORY -b "$NOTIFICATION_MESSAGE"

  slack-notification:
    needs: [notifications, run-scanner-action]
    uses: entur/gha-slack/.github/workflows/post.yml@v2
    if: ${{ always() && needs.notifications.outputs.alerts_found == 'True' && needs.run-scanner-action.outputs.notification_slack_enabled == 'True' }}
    with:
      channel_id: ${{ needs.run-scanner-action.outputs.notification_slack_channel_id }}
      blocks: |
        {
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "Code Scan - Alert(s) found with severity ${{ needs.run-scanner-action.outputs.notification_severity_threshold }}"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Results*\n Scan results can be found <https://github.com/entur/${{ github.repository }}/security/code-scanning?query=is%3Aopen+pr%3A${{ github.event.pull_request.number }}|here>"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Allowlist*\n Use the allowlist if you want to ignore vulnerabilities that do not affect the repository. \nSee the <https://github.com/entur/gha-security/blob/main/README-code-scan.md#allow-lists|Code Scan documentation> on how to use allowlist."
              }
            }
          ]
        }
    secrets: inherit