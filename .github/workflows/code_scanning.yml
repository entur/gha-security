name: 'Entur/Security/Code Scanning'

on:
    workflow_call:
      inputs:
        whitelisting-file:
          description: 'Whitelisting file'
          required: false
          type: string
          default: .code_scanning_whitelist.yml
        
jobs:
#    get-repository-languages:
#        runs-on: ubuntu-latest
#        outputs: 
#            repository_languages: ${{ env.GHA_SECURITY_CODE-SCANNING_REPOSITORY_LANGUAGES }} 
#        steps:
#            - id: get-repository-languages
#              run: |
#                  #TODO: maybe at some point it will be possible to ask `gh codeql` for a list of supported languages6
#                  languages="$(gh api /repos/${{ github.repository }}/languages | \
#                    jq 'keys 
#                        | .[] as $langs
#                        | {
#                            "C":"c",
#                            "C++":"cpp",
#                            "C#":"csharp",
#                            "Go":"go",
#                            "Java":"java",
#                            "JavaScript":"javascript",
#                            "TypeScript":"typescript",
#                            "Kotlin":"kotlin",
#                            "Python":"python",
#                            "Ruby":"ruby",
#                            "Swift":"swift"
#                          } as $supported 
#                        | $langs         # operate on all the languages
#                        | $supported[.]  # and lookup their values, null if not found
#                        | select(.)      # select removes null values
#                    ' | \
#                    jq --slurp --compact-output 'unique')" # make a oneliner, and remove duplicates
#            
#                  echo 'GHA_SECURITY_CODE-SCANNING_REPOSITORY_LANGUAGES='$languages >> $GITHUB_ENV
#              env:
#                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#    codeql-analysis:
#        runs-on: ubuntu-latest
#        needs: get-repository-languages
#        permissions:
#            # CodeQL - required for all workflows
#            security-events: write
#            # CodeQL - only required for workflows in private repositories
#            actions: read
#            contents: read
#
#            issues: write # required for creating issues, and/or adding issue comments
#            pull-requests: write # required for creating comments on pull requests
#        strategy:
#            fail-fast: false
#            matrix:
#                language: ${{fromJson(needs.get-repository-languages.outputs.repository_languages)}}
#        steps:
#            - name: "Checkout repository"
#              uses: actions/checkout@v4
#            - name: "Initialize CodeQL for Java"
#              uses: github/codeql-action/init@v3
#              with:
#                languages: ${{ matrix.language }}
#                build-mode: none
#              if: matrix.language == 'java'
#            - name: "Initialize CodeQL"
#              uses: github/codeql-action/init@v3
#              with:
#                languages: ${{ matrix.language }}
#              if: matrix.language != 'java'
#            - name: "Perform CodeQL Analysis"
#              id: codeql-analysis
#              uses: github/codeql-action/analyze@v3
#              with:
#                category: "/language:${{ matrix.language }}"

    whitelist-code_scanning_alerts:
      runs-on: ubuntu-latest
#      needs: codeql-analysis
      permissions:
          # required to read code scanning alerts
          security-events: read

          # required to checkout the repository
          contents: read
          actions: read
      steps:
          - name: "Checkout repository"
            uses: actions/checkout@v4
          - name: "Get code scanning alerts"
            run: |
              gh api \
                --method GET \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                /repos/${{ github.repository }}/code-scanning/alerts \
                -F state="open" -F ref="${{ github.ref }}" -F per_page="100" > code_scanning_alerts.json
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          - name: "Print WHITELISTING"
            run: |
              echo ${{ inputs.whitelisting-file }}
              cat ${{ inputs.whitelisting-file }}
          - name: "Whitelist code scanning alerts"
            run: |
              python -c "
              import yaml
              import json

              with open('${{ inputs.whitelisting-file }}', 'r') as f:
                  whitelisting = yaml.load(f, Loader=yaml.SafeLoader)

              with open('code_scanning_alerts.json') as f:
                code_scanning_alerts = json.load(f)
                
              for item in whitelisting:
                for alert in code_scanning_alerts:
                  if item['cwe'] in alert['rule']['tags']:
                      print(f\"ID: {alert['number']}, \")
              "