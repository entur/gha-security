name: 'Entur/Security/Docker Scan'

on:
    workflow_call:
        inputs:
            image_artifact:
                description: 'Image artifact to scan'
                type: string
                required: true
            local_whitelist:
                description: 'Name of whitelisting file for Docker scan alerts, located in the same repository as the "caller" workflow. If not placed in the root of the repository, the path must be specified'
                type: string
                required: false
            external_whitelist:
                description: 'Name of whitelisting file for Docker scan alerts, located in another repository. If not placed in the root of the repository, the path must be specified'
                type: string
                required: false
            external_repository:
                description: 'Name of the repository where the external whitelist file is located'
                type: string
                required: false
        secrets:
            external_repository_token:
                description: 'Token for the repository where the external whitelist file is located. Must be provided if the external whitelist file is located in a private repository, and given read access to the repository.'
                required: false

env:
  GHA_SECURITY_DOCKER_SCAN_IMAGE_ARTIFACT: ${{ inputs.image_artifact }}
  GHA_SECURITY_DOCKER_SCAN_LOCAL_WHITELIST: ${{ inputs.local_whitelist }}
  GHA_SECURITY_DOCKER_SCAN_EXTERNAL_WHITELIST: ${{ inputs.external_whitelist }}
  GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY: ${{ inputs.external_repository }}
  GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY_TOKEN: ${{ secrets.external_repository_token }}

jobs:
    docker-scan:
        runs-on: ubuntu-latest
        permissions:
            contents: write # required for checking out the repository and creating files
            issues: write # required for creating issues, and/or adding issue comments
            pull-requests: write # required for creating comments on pull requests
            security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
        steps:
        - name: "Checkout repository"
          uses: actions/checkout@v4
        - name: "Download the image artifact"
          uses: actions/download-artifact@v4
          with:
            name: ${{ env.GHA_SECURITY_DOCKER_SCAN_IMAGE_ARTIFACT }}
        - name: Checkout external whitelist (from public repository)
          id: checkout-external-whitelist-public
          if: ${{env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_WHITELIST != '' && env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY != '' && env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY_TOKEN != '' }}
          uses: actions/checkout@v4
          with:
            repository: entur/${{ env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY }}
            path: './external_repository'
            sparse-checkout: ${{ env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_WHITELIST }}
            sparse-checkout-cone-mode: false
        - name: Checkout external whitelist (from private repository)
          id: checkout-external-whitelist-private
          if: ${{env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_WHITELIST != '' && env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY != '' && env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY_TOKEN != '' }}
          uses: actions/checkout@v4
          with:
            repository: entur/${{ env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY }}
            path: './external_repository'
            token: ${{ env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_REPOSITORY_TOKEN }}
            sparse-checkout: ${{ env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_WHITELIST }}
            sparse-checkout-cone-mode: false
        - name: "Create image whitelist schema file"
          if: ${{ env.GHA_SECURITY_DOCKER_SCAN_LOCAL_WHITELIST != '' || (steps.checkout-external-whitelist-public.outcome == 'success' || steps.checkout-external-whitelist-private.outcome == 'success') }}
          run: |
            cat > image_whitelist_schema.yaml << EOF
            apiVersion: 
              required: true
              type: string
              allowed:
                - entur.io/v1alpha1
            kind:
                required: true
                type: string
                allowed:
                  - DockerScanConfig
            metadata:
                required: true
                type: dict
                schema:
                  name:
                    required: true
                    type: string
            spec:
              required: true
              type: dict
              schema:
                whitelist:
                  required: true
                  type: list
                  schema:
                    type: dict
                    schema:
                      cve:
                        required: true
                        type: string
                      comment:
                        required: true
                        type: string
                      reason:
                        required: true
                        type: string
            EOF
            echo 'GHA_SECURITY_DOCKER_SCAN_WHITELIST_SCHEMA=image_whitelist_schema.yaml' >> $GITHUB_ENV
        - name: "Validate local whitelist file against schema"
          id: validate-local-whitelist
          if: ${{ env.GHA_SECURITY_DOCKER_SCAN_LOCAL_WHITELIST != '' }}
          uses: navikt/yaml-validator@3ab9bb9633648423b1287ec5e55b7f6c6412e074
          with: 
            schema_path: ${{ env.GHA_SECURITY_DOCKER_SCAN_WHITELIST_SCHEMA }}
            document_path: ${{ env.GHA_SECURITY_DOCKER_SCAN_LOCAL_WHITELIST }}
        - name: "Validate external whitelist file against schema"
          id: validate-external-whitelist
          if: steps.checkout-external-whitelist-public.outcome == 'success' || steps.checkout-external-whitelist-private.outcome == 'success'
          uses: navikt/yaml-validator@3ab9bb9633648423b1287ec5e55b7f6c6412e074
          with: 
            schema_path: ${{ env.GHA_SECURITY_DOCKER_SCAN_WHITELIST_SCHEMA }}
            document_path: external_repository/${{ env.GHA_SECURITY_DOCKER_SCAN_EXTERNAL_WHITELIST }}
        - name: Convert image whitelist content to base64
          id: convert-whitelist-to-base64
          if: steps.validate-local-whitelist.outcome == 'success' || steps.validate-external-whitelist.outcome == 'success'
          run: |
            python -c "
            import yaml
            import base64
            import os 

            whitelist = {}

            remote_config = None
            try:
              with open(os.getenv('GHA_SECURITY_DOCKER_SCAN_EXTERNAL_WHITELIST'), 'r') as f:
                remote_config = yaml.load(f, Loader=yaml.SafeLoader)
              for element in remote_config['spec']['whitelist']:
                whitelist[element['cve']] = {
                'comment': element['comment'],
                'reason': element['reason']
                }
            except IOError:
              pass

            local_config = None
            try:
              with open(os.getenv('GHA_SECURITY_DOCKER_SCAN_LOCAL_WHITELIST'), 'r') as f:
                local_config = yaml.load(f, Loader=yaml.SafeLoader)
              for element in local_config['spec']['whitelist']:
                whitelist[element['cve']] = {
                'comment': element['comment'],
                'reason': element['reason']
                }
            except IOError:
              pass

            grype_whitelisting = {'ignore': [{'vulnerability': dismissal['cve']} for dismissal in whitelist]}
            grype_whitelisting_yaml = yaml.dump(grype_whitelisting)
            grype_whitelisting_base64 = base64.b64encode(grype_whitelisting_yaml.encode()).decode()
            env_file = os.getenv('GITHUB_ENV')
            with open(env_file, 'a') as f:
                f.write('GHA_SECURITY_DOCKER_SCAN_WHITELIST_BASE64={}'.format(grype_whitelisting_base64))
            "
        - name:  "Check if grype.yaml exists"
          if: steps.convert-whitelist-to-base64.outcome == 'success'
          run: |
            if test -f grype.yaml; then
              echo 'GHA_SECURITY_DOCKER_SCAN_GRYPE_YAML_EXISTS=true' >> $GITHUB_ENV
            else
              echo 'GHA_SECURITY_DOCKER_SCAN_GRYPE_YAML_EXISTS=false' >> $GITHUB_ENV
            fi
        - name: "Create grype.yaml"
          if: env.GHA_SECURITY_DOCKER_SCAN_GRYPE_YAML_EXISTS == 'false'
          run: |
            gh api \
              --method PUT \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/contents/grype.yaml \
              -f "message=Create grype.yaml" -f "content=${{ env.GHA_SECURITY_DOCKER_SCAN_WHITELIST_BASE64 }}"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: "Update grype.yaml"
          if: env.GHA_SECURITY_DOCKER_SCAN_GRYPE_YAML_EXISTS == 'true'
          run: |
            grype_file="$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/contents/grype.yaml)"
            grype_file_sha=$(echo "$grype_file" | jq -r '.sha')
            gh api \
              --method PUT \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/contents/grype.yaml \
              -f "message=Update grype.yaml" -f "content=${{ env.GHA_SECURITY_DOCKER_SCAN_WHITELIST_BASE64 }}" \
              -f "sha=$grype_file_sha"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: "Anchore Grype Scan"
          id: anchore-scan
          uses: anchore/scan-action@3343887d815d7b07465f6fdcd395bd66508d486a
          with: 
            image: ${{ inputs.image_artifact }}.tar
            by-cve: true
        - name: "Upload vulnerability report"
          id: upload-vulnerability-report
          if: ${{ !cancelled() }}
          uses: github/codeql-action/upload-sarif@v3
          with: 
            sarif_file: ${{ steps.anchore-scan.outputs.sarif }}
            category: 'anchore-grype-scan'
        - name: "Create comment on pull request if critical vulnerabilities found"
          if: always() && (steps.anchore-scan.outcome == 'failure') && (steps.upload-vulnerability-report.outcome == 'success') && (github.event_name == 'pull_request')
          run: |
            PR_NUMBER=${{ github.event.pull_request.number }}
            REPOSITORY=${{ github.repository }}
            gh api /repos/$REPOSITORY/issues/$PR_NUMBER/comments \
                -H "Accept: application/vnd.github.v3+json" \
                --field "body=:no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: 
                Anchore Grype scan found critical vulnerabilities in the image artifact. Please address these vulnerabilities.
                The scan results can be found [here](https://github.com/$REPOSITORY/security/code-scanning?query=is%3Aopen+pr%3A$PR_NUMBER)
                :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry: :no_entry:"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
