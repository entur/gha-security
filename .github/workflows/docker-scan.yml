name: 'Entur/Security/Docker Scan'

on:
  workflow_call:
    inputs:
      image_artifact:
        description: 'Image artifact to scan'
        type: string
        required: true
    secrets:
      external_repository_token:
        description: 'Token to access the external repository mentioned in the dockerscan.yml file. Must have read access to the repository.'
        required: false

env:
  GHA_SECURITY_DOCKER_SCAN_IMAGE_ARTIFACT: ${{ inputs.image_artifact }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  GIT_REF: ${{ github.ref }}

jobs:
  docker-scan:
    outputs:
      notification_severity_alert_found: ${{ steps.scanner-action.outputs.notification_severity_alert_found }}
      notification_severity_low: ${{ fromJSON(steps.scanner-action.outputs.notification_severity_overview).low }}
      notification_severity_medium: ${{ fromJSON(steps.scanner-action.outputs.notification_severity_overview).medium }}
      notification_severity_high: ${{ fromJSON(steps.scanner-action.outputs.notification_severity_overview).high }}
      notification_severity_critical: ${{ fromJSON(steps.scanner-action.outputs.notification_severity_overview).critical }}
      notification_severity_threshold: ${{ steps.scanner-action.outputs.notification_severity_threshold }}
      notification_slack_channel_id: ${{ steps.scanner-action.outputs.notification_slack_channel_id }}
      notification_slack_enabled: ${{ steps.scanner-action.outputs.notification_slack_enabled }}
      notification_pull_request_enabled: ${{ steps.scanner-action.outputs.notification_pull_request_enabled }}
    # See https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#scanning-on-push
    # If we found a language, and the event is not a push made by dependabot on a PR
    if: ${{ github.event != 'push' || (github.event == 'push' && github.actor != 'dependabot[bot]') }}
    runs-on: ubuntu-24.04
    permissions:
      contents: write # required for checking out the repository and creating files
      issues: write # required for creating issues, and/or adding issue comments
      pull-requests: write # required for creating comments on pull requests
      security-events: write # required for uploading SARIF file to GitHub 
      actions: read #required for uploading SARIF file to GitHub (workflows in private repositories)
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Checkout central allowlist repository"
        uses: actions/checkout@v5
        with:
          repository: entur/central-allowlist
          ref: main
          path: central-allowlist
          token: ${{ secrets.GHA_SECURITY_CENTRAL_ALLOWLIST }}

      - name: "Download the image artifact"
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.GHA_SECURITY_DOCKER_SCAN_IMAGE_ARTIFACT }}

      - name: Scanner Action
        id: scanner-action
        uses: entur/gha-security/scanner-action@feature/SIK-1623
        with:
          scanner: 'dockerscan'
          token: ${{ secrets.GITHUB_TOKEN }}
          external-repository-token: ${{ secrets.external_repository_token }}

      - name: "Docker workdir extraction"
        id: docker-workdir
        run: |
          IMAGE=$(docker load -i ${{ inputs.image_artifact }}.tar | sed 's/Loaded image: //')
          WORKDIR=$( docker inspect -f {{.Config.WorkingDir}} $IMAGE )
          if [[ "$WORKDIR" != "/" && "$WORKDIR" != "" ]]; then
            echo "DOCKER_WORKDIR=$WORKDIR" >>$GITHUB_ENV
          else
            echo "::warning ::Setting WORKDIR to /app (or similar) and running the application from there is highly recommended."
          fi
      - name: "Anchore Syft Scan"
        id: syft-scan
        uses: anchore/sbom-action@v0
        env:
          SYFT_EXCLUDE: ${{ env.DOCKER_WORKDIR }}
        with:
          format: spdx-json
          image: ${{ inputs.image_artifact }}.tar
          output-file: ${{ inputs.image_artifact }}.spdx.json
          artifact-name: ${{ inputs.image_artifact }}.spdx.json
          dependency-snapshot: ${{ github.ref_name == github.event.repository.default_branch }}
        
      - name: "Anchore Grype Scan"
        id: anchore-scan
        uses: anchore/scan-action@v7
        with: 
          sbom: ${{ inputs.image_artifact }}.spdx.json
          by-cve: true
          fail-build: false
          severity-cutoff: critical

      - name: "Upload vulnerability report"
        id: upload-vulnerability-report
        uses: github/codeql-action/upload-sarif@v3
        with: 
          sarif_file: ${{ steps.anchore-scan.outputs.sarif }}
          category: 'anchore-grype-scan'

  check-for-critical-alerts:
    runs-on: ubuntu-24.04
    if: ${{ always() }}
    needs: [docker-scan]
    permissions: 
      security-events: read # required to read code scan alerts
      pull-requests: write # required for creating comments on pull requests
    steps:
      - name: "Get critical docker scan alerts"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e # Do not exit if a command fails
          alerts="$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            /repos/${GITHUB_REPOSITORY}/code-scanning/alerts \
            -F severity='critical' -F state='open' -F ref='$GIT_REF' -F per_page='100' -F tool_name='Grype' --paginate)"
            
          if [ $? != 0 ]; then
            echo "Failed to get alerts from Github. The previous upload vulnerability report step might have failed to be processed/uploaded. Try running the job again"
            echo '## Docker Scan - Failed to get alerts.
            Upload vulnerability report step might have failed to be processed/uploaded.
            Try running the job again' >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            if [ "$alerts" == "[]" ]; then
              echo 'GHA_SECURITY_DOCKER_SCAN_CREATE_ALERT_COMMENT='False >> $GITHUB_ENV
            else
              echo 'GHA_SECURITY_DOCKER_SCAN_CREATE_ALERT_COMMENT='True >> $GITHUB_ENV
            fi
          fi
      - name: "Print to job summary if critical alerts are found"
        if: ${{ env.GHA_SECURITY_DOCKER_SCAN_CREATE_ALERT_COMMENT == 'True' }}
        env:
          REPOSITORY: ${{ github.repository }}
        run: |
          echo '## ⛔ Docker Image Scan - Critical Vulnerabilities ⛔
          **Docker Image scan found critical vulnerabilities in the image artifact that needs to be addressed.**
          ### Results
          The scan results can be found [here](https://github.com/'"$REPOSITORY"'/security/code-scanning?query=is%3Aopen+ref%3A'"$GIT_REF"')
          ### Allowlist
          Use the allowlist if you want to ignore vulnerabilities that do not affect the repository.  
          See the [Docker Scan documentation](https://github.com/entur/gha-security/blob/main/README-docker-scan.md#allowlisting-vulnerabilities) on how to use allowlist.' >> $GITHUB_STEP_SUMMARY
      - name: "Create comment on pull request if critical alerts are found"
        if: ${{ env.GHA_SECURITY_DOCKER_SCAN_CREATE_ALERT_COMMENT == 'True' && github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr comment $PR_NUMBER --repo $GITHUB_REPOSITORY -b "## ⛔ Docker Image Scan - Critical Vulnerabilities ⛔
          **Docker Image scan found critical vulnerabilities in the image artifact that needs to be addressed.**
          ### Results
          The scan results can be found [here](https://github.com/${GITHUB_REPOSITORY}/security/code-scanning?query=is%3Aopen+pr%3A$PR_NUMBER)
          ### Allowlist
          Use the allowlist if you want to ignore vulnerabilities that do not affect the repository.  
          See the [Docker Scan documentation](https://github.com/entur/gha-security/blob/main/README-docker-scan.md#allowlisting-vulnerabilities) on how to use allowlist."
  notifications:
    if: ${{ needs.docker-scan.outputs.notification_severity_alert_found == 'True' && (needs.docker-scan.outputs.notification_slack_enabled == 'True' || needs.docker-scan.outputs.notification_pull_request_enabled == 'True') }}
    needs: [ docker-scan ]
    runs-on: ubuntu-24.04
    permissions:
      security-events: read # required to read code scan alerts
      pull-requests: write # required for creating comments on pull requests
    outputs:
      slack_block: ${{ steps.slack-block.outputs.SLACK_BLOCK }}
    env:
      SEVERITY_THRESHOLD: ${{ needs.docker-scan.outputs.notification_severity_threshold }}
      SEVERITY_LOW: ${{ needs.docker-scan.outputs.notification_severity_low }}
      SEVERITY_MEDIUM: ${{ needs.docker-scan.outputs.notification_severity_medium }}
      SEVERITY_HIGH: ${{ needs.docker-scan.outputs.notification_severity_high }}
      SEVERITY_CRITICAL: ${{ needs.docker-scan.outputs.notification_severity_critical }}
    steps:
      - name: "Create Slack block"
        id: slack-block
        if: ${{ needs.docker-scan.outputs.notification_slack_enabled == 'True' }}
        run: |
          {
            echo "SLACK_BLOCK<<EOF"
            echo "
            {
              \"blocks\": 
              [
                {
                  \"type\": \"header\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"Docker Image Scan - Alert(s) found with threshold matching severity $SEVERITY_THRESHOLD on $GITHUB_REPOSITORY\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Results*\n- critical: $SEVERITY_CRITICAL \n- high: $SEVERITY_HIGH \n- medium: $SEVERITY_MEDIUM \n- low: $SEVERITY_LOW \n Docker Scan Report can be found <https://github.com/$GITHUB_REPOSITORY/security/code-scanning?query=is:open+ref:$GIT_REF+tool:Grype|here>\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Allowlist*\n Use the allowlist if you want to ignore vulnerabilities that do not affect the repository. \nSee the <https://github.com/entur/gha-security/blob/main/README-docker-scan.md#allowlisting-vulnerabilities|Docker Scan documentation> on how to use allowlist.\"
                  }
                }
              ]
            }"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: "Send pull request notification"
        if: ${{ github.event_name == 'pull_request' && needs.docker-scan.outputs.notification_pull_request_enabled == 'True' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr comment $PR_NUMBER --repo $GITHUB_REPOSITORY -b "## Docker Image Scan - Alert(s) found with threshold matching severity $SEVERITY_THRESHOLD 
          ### Results
          - critical: $SEVERITY_CRITICAL 
          - high: $SEVERITY_HIGH
          - medium: $SEVERITY_MEDIUM  
          - low: $SEVERITY_LOW
          Docker Image Scan Report can be found [here](https://github.com/$GITHUB_REPOSITORY/security/code-scanning?query=is:open+ref:$GIT_REF+tool:Grype)
          ### Allowlist
          Use the allowlist if you want to ignore vulnerabilities that do not affect the repository.  
          See the [Docker Scan documentation](https://github.com/entur/gha-security/blob/main/README-docker-scan.md#allowlisting-vulnerabilities) on how to use allowlist."
  slack-notification:
    needs: [ notifications, docker-scan ]
    uses: entur/gha-slack/.github/workflows/post.yml@v2
    if: ${{ needs.docker-scan.outputs.notification_severity_alert_found == 'True' && needs.docker-scan.outputs.notification_slack_enabled == 'True' }}
    with:
      channel_id: ${{ needs.docker-scan.outputs.notification_slack_channel_id }}
      blocks: ${{ needs.notifications.outputs.slack_block }}
    secrets: inherit